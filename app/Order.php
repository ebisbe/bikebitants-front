<?php

namespace App;

use Jenssegers\Mongodb\Eloquent\Model;
use App\Business\Repositories\ProductRepository;
use App\Exceptions\OutOfStockException;
use \Request;

/**
 * Class Order
 * @package App
 *
 * @property int status
 * @property bool print_analytics
 * @property Billing $billing
 * @property Shipping $shipping
 * @property integer $external_id
 *
 */
class Order extends Model
{

    const NEW = 1;
    const VALID_DATA = 2;
    const REDIRECTED = 3;
    const CONFIRMED = 4;
    const CANCELLED = -1;
    const UNDEFINED = -2;

    protected $fillable = [
        'billing_id', 'shipping_id', 'user_id', 'status', 'payment_method', 'external_id', 'print_analytics'
    ];

    public $attributes = [
        'status' => Order::NEW,
        'print_analytics' => true
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        self::creating(function ($order) {
            /** @var Order $order */
            $order->cart()->map(function ($cart) {
                /** @var Variation $variation */
                $variation = (new ProductRepository())->findBy('_id', $cart->product_id)
                    ->productVariation(array_merge([$cart->product_id], $cart->properties));

                if ($variation->stock - $cart->quantity < 0) {
                    throw new OutOfStockException(trans('exceptions.out_of_stock', ['product' => $variation->sku]));
                }
            });
        });
    }

    /**
     * @return \Jenssegers\Mongodb\Relations\EmbedsOne
     */
    public function billing()
    {
        return $this->embedsOne(Billing::class);
    }

    /**
     * @return \Jenssegers\Mongodb\Relations\EmbedsOne
     */
    public function shipping()
    {
        return $this->embedsOne(Shipping::class);
    }

    /**
     * @return \Jenssegers\Mongodb\Relations\EmbedsMany
     */
    public function cart()
    {
        return $this->embedsMany(Cart::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function customer()
    {
        return $this->belongsTo(Customer::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function payment_method()
    {
        return $this->belongsTo(PaymentMethod::class);
    }

    /**
     * @return bool
     */
    public static function isCurrentOrderConfirmed()
    {
        $order = self::currentOrder()->get();
        return !$order->isEmpty() && $order->first()->status == self::CONFIRMED ? true : false;
    }

    /**
     * @return Order|null
     */
    public function scopeCurrentOrder($query)
    {

        return $query->where('token', Request::session()->get('order'));
    }

    public function conditionsFilter($condition)
    {
        return collect($this->conditions)
            ->filter(function ($conditions) use ($condition) {
                return $conditions['type'] == $condition;
            })->first();
    }
}
