<?php

namespace App;

use App\Business\MongoEloquentModel as Model;
use MongoDB\BSON\UTCDatetime;

/**
 * Class Coupon
 * @package App
 *
 * @property UTCDatetime expired_at
 * @property integer minimum_cart
 * @property integer|null maximum_cart
 * @property array type_options
 * @property string email_list
 */
class Coupon extends Model
{
    const CART_CONDITION_TYPE = 'coupon';

    const PERCENTAGE = '%';
    const DIRECT = '&euro;';

    protected $fillable = ['name', 'value', 'magnitude', 'type', 'expired_at', 'minimum_cart', 'maximum_cart', 'limit_usage_by_coupon', 'limit_usage_by_user', 'single_use', 'emails', 'external_id'];

    protected $dates = ['created_at', 'updated_at', 'expired_at'];

    protected $casts = [
        'single_use' => 'boolean',
    ];

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        Coupon::saving(function ($coupon) {
            if (!empty($coupon->emails) && !is_array($coupon->emails)) {
                $coupon->emails = explode(',', $coupon->emails);
            }
            $coupon->value = "{$coupon->magnitude}{$coupon->type}";
            return $coupon;
        });
    }

    /**
     * Array list of coupon types
     * @return array
     */
    public function getTypeOptionsAttribute()
    {
        return [self::DIRECT => self::DIRECT, self::PERCENTAGE => self::PERCENTAGE];
    }
    /**
     * Array list of coupon types
     * @return array
     */
    public function getEmailsListAttribute()
    {
        return implode(',', $this->emails);
    }

    /**
     * Add to cart conditions a valid couponName
     * @param $couponName
     * @return array
     */
    public static function addToCart($couponName)
    {
        if (empty($couponName)) {
            return [];
        }

        $coupon = Coupon::whereName($couponName)->first();

        return [
            'name' => $coupon->name,
            'type' => Coupon::CART_CONDITION_TYPE,
            'target' => Cart::CART_CONDITION_TARGET_ITEM,
            'value' => $coupon->value,
            'order' => 1
        ];
    }

    /**
     * Return type options for a coupon
     * @return array
     */
    public static function TypeOptions()
    {
        return (new Coupon())->type_options;
    }
}
